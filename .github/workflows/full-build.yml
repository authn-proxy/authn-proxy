name: Full Clean Build

on:
  push:
    branches:
    - master
    paths-ignore:
      - .github/**
      - .vscode/**
      - README.md
      - doc/**
      - .devcontainer/**
  pull_request: 
    paths-ignore:
      - .github/**
      - .vscode/**
      - README.md
      - doc/**
      - .devcontainer/**

jobs:
  build:
    # For this list of included software 
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
      # A test app
      whoami:
        image: containous/whoami
        ports:
          - 8080:80

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Cargo Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: NPM Cache
        uses: actions/cache@v2
        with:
          path: ui/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Build the Asset Pipeline
        run: npm ci --cache .npm && npm run release
            
      # Run Migrations using diesel which we have pre-built into a container
      # We didnt set a healthcheck on postgres. Hopefully it's ready by now.
      - name: Run Migrations
        run: docker run -e DATABASE_URL=$DATABASE_URL --rm --network host -v "$(pwd)":/app -w /app ianpurton/rust-diesel diesel setup
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432

      - name: Build
        run: cargo build --release
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432

      - name: Strip
        run: strip target/release/contor

      - name: Integraton Testing
        run: |
          target/release/contor &
          chromedriver --whitelisted-ips="" &
          cargo test --release
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432
          WEB_DRIVER_URL: http://localhost:9515
          SECRET_KEY: 50fb08b06b381c575e60c56328f66a51822320e922c7e11e264a7bb443ee22fe
          FORWARD_URL: localhost
          FORWARD_PORT: 8080
          REDIRECT_URL: /
          PORT: 9095
          USER_TABLE_NAME: bcrypt_users
      
      - name: 'Upload Screenshots'
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: screenshots
          path: target/*.png

      
      - name: Create Docker file
        run: |
          EXE_NAME=contor
          set -e
          chmod +x ./target/release/$EXE_NAME
          echo 'FROM scratch' > ./Dockerfile
          echo "COPY ./target/release/$EXE_NAME /rust-executable" >> ./Dockerfile
          echo 'COPY ./asset-pipeline/dist /asset-pipeline/dist' >> ./Dockerfile
          echo 'CMD ["/rust-executable"]' >> ./Dockerfile
          docker build -t contorsystems/contor .

      - name: Create Docker file
        run: |
          docker login -u $(USERNAME) -p $(DOCKERHUB_ACCESS_TOKEN) 
          docker push contorsystems/contor